name: Docker Image Version Management

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if version unchanged'
        required: false
        default: false
        type: boolean


jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      should_build: ${{ steps.version.outputs.should_build }}
      current_version: ${{ steps.version.outputs.current_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Detect version changes
        id: version
        env:
          FORCE_BUILD: ${{ github.event.inputs.force_build }}
        run: node .github/scripts/detect-version.js

  build-and-push:
    runs-on: ubuntu-latest
    needs: detect-version
    if: needs.detect-version.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.REGISTRY_DOCKERHUB }}
          tags: |
            type=raw,value=${{ needs.detect-version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            LOCIZE_CLI_VERSION=${{ needs.detect-version.outputs.new_version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [detect-version, build-and-push]
    if: needs.detect-version.outputs.should_build == 'true'
    strategy:
      matrix:
        registry:
          - "ligouras/locize-cli"
        platform:
          - "linux/amd64"
          - "linux/arm64"
    steps:
      - name: Verify image deployment
        run: |
          echo "Verifying ${{ matrix.registry }}:${{ needs.detect-version.outputs.new_version }} on ${{ matrix.platform }}"

          # Pull and test the specific version
          docker pull --platform ${{ matrix.platform }} ${{ matrix.registry }}:${{ needs.detect-version.outputs.new_version }}

          # Test basic functionality
          VERSION_OUTPUT=$(docker run --rm --platform ${{ matrix.platform }} ${{ matrix.registry }}:${{ needs.detect-version.outputs.new_version }} --version)
          echo "Version output: $VERSION_OUTPUT"

          # Verify version matches expected
          if echo "$VERSION_OUTPUT" | grep -q "${{ needs.detect-version.outputs.new_version }}"; then
            echo "✅ Version verification passed"
          else
            echo "❌ Version verification failed"
            exit 1
          fi

          # Test help command
          docker run --rm --platform ${{ matrix.platform }} ${{ matrix.registry }}:${{ needs.detect-version.outputs.new_version }} --help > /dev/null
          echo "✅ Help command test passed"

  update-tracking:
    runs-on: ubuntu-latest
    needs: [detect-version, build-and-push, verify-deployment]
    if: needs.detect-version.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update version tracking
        run: |
          echo "${{ needs.detect-version.outputs.new_version }}" > .locize-cli-version

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit and push changes
          git add .locize-cli-version
          git commit -m "Update tracked locize-cli version to ${{ needs.detect-version.outputs.new_version }}"
          git push

      - name: Create release summary
        run: |
          echo "## 🚀 Docker Image Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.detect-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** ${{ needs.detect-version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`ligouras/locize-cli:${{ needs.detect-version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ligouras/locize-cli:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Verification Status" >> $GITHUB_STEP_SUMMARY
          echo "All images have been successfully built, pushed, and verified on Docker Hub for both platforms." >> $GITHUB_STEP_SUMMARY